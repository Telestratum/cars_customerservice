/*
 * Customer Management Service
 * A service for placing orders and transactions
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hariprasath.narayanasamy@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from './ApiClient';
import {Model200OrderDeletedResponse} from './model/Model200OrderDeletedResponse';
import {Model201OrderCreatedResponse} from './model/Model201OrderCreatedResponse';
import {Model400BadRequestResponse} from './model/Model400BadRequestResponse';
import {Model401UnauthorizedResponse} from './model/Model401UnauthorizedResponse';
import {Model403ForbiddenResponse} from './model/Model403ForbiddenResponse';
import {Model404NotFoundResponse} from './model/Model404NotFoundResponse';
import {Model409ConflictResponse} from './model/Model409ConflictResponse';
import {Model503ServerUnavailableResponse} from './model/Model503ServerUnavailableResponse';
import {OrderDetails} from './model/OrderDetails';
import {OrderInfo} from './model/OrderInfo';
import {TransactionDetails} from './model/TransactionDetails';
import {TransactionInfo} from './model/TransactionInfo';
import {OrdersApi} from './api/OrdersApi';
import {TransactionsApi} from './api/TransactionsApi';

/**
* A_service_for_placing_orders_and_transactions.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var CustomerManagementService = require('index'); // See note below*.
* var xxxSvc = new CustomerManagementService.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new CustomerManagementService.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new CustomerManagementService.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new CustomerManagementService.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Model200OrderDeletedResponse model constructor.
     * @property {module:model/Model200OrderDeletedResponse}
     */
    Model200OrderDeletedResponse,

    /**
     * The Model201OrderCreatedResponse model constructor.
     * @property {module:model/Model201OrderCreatedResponse}
     */
    Model201OrderCreatedResponse,

    /**
     * The Model400BadRequestResponse model constructor.
     * @property {module:model/Model400BadRequestResponse}
     */
    Model400BadRequestResponse,

    /**
     * The Model401UnauthorizedResponse model constructor.
     * @property {module:model/Model401UnauthorizedResponse}
     */
    Model401UnauthorizedResponse,

    /**
     * The Model403ForbiddenResponse model constructor.
     * @property {module:model/Model403ForbiddenResponse}
     */
    Model403ForbiddenResponse,

    /**
     * The Model404NotFoundResponse model constructor.
     * @property {module:model/Model404NotFoundResponse}
     */
    Model404NotFoundResponse,

    /**
     * The Model409ConflictResponse model constructor.
     * @property {module:model/Model409ConflictResponse}
     */
    Model409ConflictResponse,

    /**
     * The Model503ServerUnavailableResponse model constructor.
     * @property {module:model/Model503ServerUnavailableResponse}
     */
    Model503ServerUnavailableResponse,

    /**
     * The OrderDetails model constructor.
     * @property {module:model/OrderDetails}
     */
    OrderDetails,

    /**
     * The OrderInfo model constructor.
     * @property {module:model/OrderInfo}
     */
    OrderInfo,

    /**
     * The TransactionDetails model constructor.
     * @property {module:model/TransactionDetails}
     */
    TransactionDetails,

    /**
     * The TransactionInfo model constructor.
     * @property {module:model/TransactionInfo}
     */
    TransactionInfo,

    /**
    * The OrdersApi service constructor.
    * @property {module:api/OrdersApi}
    */
    OrdersApi,

    /**
    * The TransactionsApi service constructor.
    * @property {module:api/TransactionsApi}
    */
    TransactionsApi
};
