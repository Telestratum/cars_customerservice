/*
 * Customer Management Service
 * A service for placing orders and transactions
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hariprasath.narayanasamy@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Model200OrderDeletedResponse} from '../model/Model200OrderDeletedResponse';
import {Model201OrderCreatedResponse} from '../model/Model201OrderCreatedResponse';
import {Model400BadRequestResponse} from '../model/Model400BadRequestResponse';
import {Model401UnauthorizedResponse} from '../model/Model401UnauthorizedResponse';
import {Model403ForbiddenResponse} from '../model/Model403ForbiddenResponse';
import {Model404NotFoundResponse} from '../model/Model404NotFoundResponse';
import {Model409ConflictResponse} from '../model/Model409ConflictResponse';
import {Model503ServerUnavailableResponse} from '../model/Model503ServerUnavailableResponse';
import {OrderDetails} from '../model/OrderDetails';
import {OrderInfo} from '../model/OrderInfo';

/**
* Orders service.
* @module api/OrdersApi
* @version 1.0.0
*/
export class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the bookingCar operation.
     * @callback moduleapi/OrdersApi~bookingCarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model201OrderCreatedResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Book a car
     * @param {Object} opts Optional parameters
     * @param {module:model/OrderInfo} opts.body Booking cars
     * @param {module:api/OrdersApi~bookingCarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bookingCar(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model201OrderCreatedResponse;

      return this.apiClient.callApi(
        '/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteOrder operation.
     * @callback moduleapi/OrdersApi~deleteOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200OrderDeletedResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete order
     * @param {String} orderId 
     * @param {module:api/OrdersApi~deleteOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteOrder(orderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling deleteOrder");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200OrderDeletedResponse;

      return this.apiClient.callApi(
        '/orders/{order_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the ordersGet operation.
     * @callback moduleapi/OrdersApi~ordersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderDetails{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get  all users
     * @param {module:api/OrdersApi~ordersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    ordersGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['applications/json', 'application/json'];
      let returnType = OrderDetails;

      return this.apiClient.callApi(
        '/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}