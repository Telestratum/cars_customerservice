/*
 * Customer Management Service
 * A service for placing orders and transactions
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hariprasath.narayanasamy@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Model400BadRequestResponse} from '../model/Model400BadRequestResponse';
import {Model401UnauthorizedResponse} from '../model/Model401UnauthorizedResponse';
import {Model403ForbiddenResponse} from '../model/Model403ForbiddenResponse';
import {Model404NotFoundResponse} from '../model/Model404NotFoundResponse';
import {Model503ServerUnavailableResponse} from '../model/Model503ServerUnavailableResponse';
import {TransactionDetails} from '../model/TransactionDetails';
import {TransactionInfo} from '../model/TransactionInfo';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 1.0.0
*/
export class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addTransaction operation.
     * @callback moduleapi/TransactionsApi~addTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionDetails{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionInfo} opts.body Adding transaction
     * @param {module:api/TransactionsApi~addTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addTransaction(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionDetails;

      return this.apiClient.callApi(
        '/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTransactions operation.
     * @callback moduleapi/TransactionsApi~getTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionDetails{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transactions
     * @param {module:api/TransactionsApi~getTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTransactions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['applications/json', 'application/json'];
      let returnType = TransactionDetails;

      return this.apiClient.callApi(
        '/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}