# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class OrderInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, model_id: str=None, user_id: str=None, transaction_id: str=None, offer_id: str=None, colour: str=None):  # noqa: E501
        """OrderInfo - a model defined in Swagger

        :param model_id: The model_id of this OrderInfo.  # noqa: E501
        :type model_id: str
        :param user_id: The user_id of this OrderInfo.  # noqa: E501
        :type user_id: str
        :param transaction_id: The transaction_id of this OrderInfo.  # noqa: E501
        :type transaction_id: str
        :param offer_id: The offer_id of this OrderInfo.  # noqa: E501
        :type offer_id: str
        :param colour: The colour of this OrderInfo.  # noqa: E501
        :type colour: str
        """
        self.swagger_types = {
            'model_id': str,
            'user_id': str,
            'transaction_id': str,
            'offer_id': str,
            'colour': str
        }

        self.attribute_map = {
            'model_id': 'model_id',
            'user_id': 'user_id',
            'transaction_id': 'transaction_id',
            'offer_id': 'offer_id',
            'colour': 'colour'
        }
        self._model_id = model_id
        self._user_id = user_id
        self._transaction_id = transaction_id
        self._offer_id = offer_id
        self._colour = colour

    @classmethod
    def from_dict(cls, dikt) -> 'OrderInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The order_info of this OrderInfo.  # noqa: E501
        :rtype: OrderInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_id(self) -> str:
        """Gets the model_id of this OrderInfo.

        model id  # noqa: E501

        :return: The model_id of this OrderInfo.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id: str):
        """Sets the model_id of this OrderInfo.

        model id  # noqa: E501

        :param model_id: The model_id of this OrderInfo.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def user_id(self) -> str:
        """Gets the user_id of this OrderInfo.

        User who booked the vehicle  # noqa: E501

        :return: The user_id of this OrderInfo.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this OrderInfo.

        User who booked the vehicle  # noqa: E501

        :param user_id: The user_id of this OrderInfo.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def transaction_id(self) -> str:
        """Gets the transaction_id of this OrderInfo.


        :return: The transaction_id of this OrderInfo.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id: str):
        """Sets the transaction_id of this OrderInfo.


        :param transaction_id: The transaction_id of this OrderInfo.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")  # noqa: E501

        self._transaction_id = transaction_id

    @property
    def offer_id(self) -> str:
        """Gets the offer_id of this OrderInfo.


        :return: The offer_id of this OrderInfo.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id: str):
        """Sets the offer_id of this OrderInfo.


        :param offer_id: The offer_id of this OrderInfo.
        :type offer_id: str
        """
        if offer_id is None:
            raise ValueError("Invalid value for `offer_id`, must not be `None`")  # noqa: E501

        self._offer_id = offer_id

    @property
    def colour(self) -> str:
        """Gets the colour of this OrderInfo.


        :return: The colour of this OrderInfo.
        :rtype: str
        """
        return self._colour

    @colour.setter
    def colour(self, colour: str):
        """Sets the colour of this OrderInfo.


        :param colour: The colour of this OrderInfo.
        :type colour: str
        """
        allowed_values = ["Radiant Red", "Pearl White", "Mat black", "Brilliant Blue", "Cosmic Cyan"]  # noqa: E501
        if colour not in allowed_values:
            raise ValueError(
                "Invalid value for `colour` ({0}), must be one of {1}"
                .format(colour, allowed_values)
            )

        self._colour = colour
